import { PopupBorder } from "../components/popup.slint";
import { CtxMenuItem } from "context-menu-item.slint";
import { ItemDelegate } from "../delegates/ItemDelegate.slint";
export component ContextMenu {
    in-out property <[string]> model;
    in property <length> min_menu_width: 32px;
    in property <length> offset_x;
    in property <length> offset_y;
    out property <bool> has_focus: focus_scope.has_focus;
    // in property <> openbtn;
    in-out property <DialogButtonRole> btn;
    callback item-clicked(/* row */ int);
    callback closed();
    in-out property <int> current_item: -1;
    focus_scope := FocusScope {
        x: 0px;
        y: 0px;
        enabled: false;

        key_pressed(event) => {
            if (event.text == Key.Escape) {
                root.close();
                return accept;
            }
            if (event.text == Key.UpArrow) {
                root.set-current-item(root.current_item - 1);
                return accept;
            }
            if (event.text == Key.DownArrow) {
                root.set-current-item(root.current_item + 1);
                return accept;
            }
            if (event.text == Key.Return) {
                root.item_clicked(root.current_item);
                root.current_item = -1;
                root.close();
                return accept;
            }
            reject
        }
    }

    public function set-current-item(index: int) {
        if (index < 0 || index >= model.length) {
            return;
        }
        current-item = index;
        item-clicked(current-item);
    }

    popup_window := PopupWindow {
        x: parent.offset_x;
        y: parent.offset_y + 20px;

        init => {
            debug("x: " + parent.offset_x / 1px);
            debug("y: " + parent.offset_y / 1px);
        }
        PopupBorder {
            min_width: root.min_menu_width;

            VerticalLayout {
                for item[index] in model: ItemDelegate {
                    width: root.min_menu_width - 30px;
                    text: item;
                    selected: root.has_focus && index == root.current_item;

                    clicked => {
                        focus_scope.enabled = false;
                        root.set-current-item(index);
                    }
                }
            }
        }
    }

    public function show() {
        popup_window.show();
    }

    public function close() {
        focus_scope.enabled = false;
        popup_window.close();
        root.closed();
    }

    public function show_and_focus() {
        focus_scope.enabled = true;
        popup_window.show();
        focus_scope.focus();
        self.set_current_item(0);
    }
}
