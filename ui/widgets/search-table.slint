import { Button, ProgressIndicator, ListView, Palette, Spinner } from "std-widgets.slint";
import { TableViewCellNoTouch, TableViewCell, TableViewRow, TableViewColumn } from "common-table.slint";
import { FileTableRow } from "filetable.slint";
import { SearchPreviewData } from "../diva-types.slint";
import { FontSettings as CosmicFontSettings } from "../styling.slint";
import { GameBananaLogic, LangTL } from "../applogic.slint";

export component OnlineSearchTable {
    in-out property <[SearchPreviewData]> results;
    in-out property <[TableColumn]> columns: [
        { title: "Preview", width: 118px },
        { title: "Name" },
        { title: "Author", width: 110px },
        { title: "Type", width: 110px },
        { title: "Date" },
        { title: "More Info" }
    ];
    in-out property <int> current-row: -1;
    out property <int> current-sort-column: -1;
    callback row-pointer-event(int/* row-index */, PointerEvent/* event */, Point/* absolute mouse position */);
    callback current-row-changed(int/* current-row */);
    callback sort-ascending(/* column-index */ int);
    callback sort-descending(/* column-index */ int);

    private property <length> min-header-height: 32px;
    private property <length> item-height: scroll-view.viewport-height / results.length;
    private property <length> current-item-y: scroll-view.viewport-y + current-row * item-height;

    private property <length> e: self.width / root.columns.length;

    public pure function get-size-next-unit(size: int) -> int {
        return (size / 1024);
    }

    public function set-current-row(index: int) {
        if (index < 0 || index >= results.length) {
            return;
        }
        current-row = index;
        current-row-changed(current-row);

        if (current-item-y < 0) {
            scroll-view.viewport-y += 0 - current-item-y;
        }
        if (current-item-y + item-height > scroll-view.visible-height) {
            scroll-view.viewport-y -= current-item-y + item-height - scroll-view.visible-height;
        }
    }

    function sort(index: int) {
        if (root.current-sort-column != index) {
            root.columns[root.current-sort-column].sort-order = SortOrder.unsorted;
        }
        if (root.columns[index].sort-order == SortOrder.ascending) {
            root.columns[index].sort-order = SortOrder.descending;
            root.sort-descending(index);
        } else {
            root.columns[index].sort-order = SortOrder.ascending;
            root.sort-ascending(index);
        }

        root.current-sort-column = index;
    }

    min-width: 400px;
    min-height: 200px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    accessible-role: table;
    forward-focus: focus-scope;

    VerticalLayout {
        Rectangle {
            clip: true;
            vertical-stretch: 0;
            min-height: root.min-header-height;
            background: Palette.control-background;

            header-layout := HorizontalLayout {
                width: max(self.preferred-width, parent.width);
                x: scroll-view.viewport-x;
                padding-right: 6px;
                min-height: root.min-header-height;

                for column[index] in root.columns: TableViewColumn {
                    sort-order: column.sort-order;
                    horizontal-stretch: column.horizontal-stretch;
                    min-width: max(column.min-width, column.width);
                    preferred-width: self.min-width;
                    max-width: (index < columns.length && column.width >= 1px) ? max(column.min-width, column.width) : 100000px;

                    clicked => {
                        root.sort(index);
                    }

                    adjust-size(diff) => {
                        column.width = max(1px, self.width + diff);
                    }

                    Text {
                        vertical-alignment: center;
                        text: column.title;
                        font-weight: CosmicFontSettings.body.font-weight;
                        font-size: CosmicFontSettings.body.font-size;
                        color: Palette.foreground;
                        overflow: elide;
                    }
                }
            }

            // padding: 5px;

        }

        scroll-view := ListView {
            for result[idx] in root.results: TableViewRow {

                selected: idx == root.current-row;
                even: mod(idx, 2) == 0;

                pointer-event(pe, pos) => {
                    root.row-pointer-event(idx, pe, {
                        x: pos.x - root.absolute-position.x,
                        y: pos.y - root.absolute-position.y,
                    });
                }

                TableViewCell {
                    horizontal-stretch: columns[0].horizontal-stretch;
                    min-width: max(columns[0].min-width, columns[0].width);
                    preferred-width: self.min-width;
                    max-width: (2 < columns.length && columns[0].width >= 1px) ? max(columns[0].min-width, columns[0].width) : 100000px;

                    if result.image-loaded: Image {
                        source: result.image;
                        image-fit: ImageFit.cover;
                        height: 62px;
                        width: 110px;
                    }
                    if !result.image-loaded: Spinner {
                        height: 62px;
                        width: 110px;
                        indeterminate: true;
                    }
                }

                TableViewCell {
                    horizontal-stretch: columns[1].horizontal-stretch;
                    min-width: max(columns[1].min-width, columns[1].width);
                    preferred-width: self.min-width;
                    max-width: (1 < columns.length && columns[1].width >= 1px) ? max(columns[1].min-width, columns[1].width) : 100000px;
                    // width: root.column_sizes[1];
                    Rectangle {
                        name-text := Text {
                            width: 100%;
                            height: 100%;
                            overflow: elide;
                            vertical-alignment: center;
                            text: result.name;
                            font-weight: CosmicFontSettings.body.font-weight;
                            font-size: CosmicFontSettings.body.font-size;
                            color: mod(idx, 2) == 0 ? Palette.control-foreground : Palette.foreground;
                        }
                    }
                }

                TableViewCell {
                    horizontal-stretch: columns[2].horizontal-stretch;
                    min-width: max(columns[2].min-width, columns[2].width);
                    preferred-width: self.min-width;
                    max-width: (1 < columns.length && columns[2].width >= 1px) ? max(columns[2].min-width, columns[2].width) : 100000px;
                    // width: root.column_sizes[1];
                    Rectangle {
                        author-text := Text {
                            width: 100%;
                            height: 100%;
                            overflow: elide;
                            vertical-alignment: center;
                            text: result.author.name;
                            font-weight: CosmicFontSettings.body.font-weight;
                            font-size: CosmicFontSettings.body.font-size;
                            color: mod(idx, 2) == 0 ? Palette.control-foreground : Palette.foreground;
                        }
                    }
                }

                TableViewCell {
                    horizontal-stretch: columns[3].horizontal-stretch;
                    min-width: max(columns[3].min-width, columns[3].width);
                    preferred-width: self.min-width;
                    max-width: (1 < columns.length && columns[3].width >= 1px) ? max(columns[3].min-width, columns[3].width) : 100000px;
                    // width: root.column_sizes[1];
                    Rectangle {
                        type-text := Text {
                            width: 100%;
                            height: 100%;
                            overflow: elide;
                            vertical-alignment: center;
                            text: result.item-type;
                            font-weight: CosmicFontSettings.body.font-weight;
                            font-size: CosmicFontSettings.body.font-size;
                            color: mod(idx, 2) == 0 ? Palette.control-foreground : Palette.foreground;
                        }
                    }
                }

                TableViewCell {
                    horizontal-stretch: columns[4].horizontal-stretch;
                    min-width: max(columns[4].min-width, columns[4].width);
                    preferred-width: self.min-width;
                    max-width: (2 < columns.length && columns[4].width >= 1px) ? max(columns[4].min-width, columns[4].width) : 100000px;
                    date-text := Text {
                        width: 100%;
                        height: 100%;
                        overflow: elide;
                        vertical-alignment: center;
                        text: result.updated != "Never" ? "Updated: " + result.updated : "Submitted: " + result.submitted;
                        font-weight: CosmicFontSettings.body.font-weight;
                        font-size: CosmicFontSettings.body.font-size;
                        color: mod(idx, 2) == 0 ? Palette.control-foreground : Palette.foreground;
                    }
                }

                TableViewCellNoTouch {
                    horizontal-stretch: columns[5].horizontal-stretch;
                    min-width: max(columns[5].min-width, columns[5].width);
                    preferred-width: self.min-width;
                    max-width: (2 < columns.length && columns[5].width >= 1px) ? max(columns[5].min-width, columns[5].width) : 100000px;
                    Button {
                        text: "Check Files";
                        primary: true;
                        colorize-icon: true;
                        icon: @image-url("../assets/cloud-arrow-down-solid.svg");
                        clicked => {
                            GameBananaLogic.list-files(result);
                        }
                    }
                }
            }
        }
    }

    focus-scope := FocusScope {
        x: 0;
        width: 0;
        // Do not react on clicks

        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                root.set-current-row(root.current-row - 1);
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.set-current-row(root.current-row + 1);
                return accept;
            }
            reject
        }
    }
}
