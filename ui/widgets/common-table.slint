import { StateLayerBase } from "../components/state-layer-base.slint";
import { Palette } from "std-widgets.slint";
import { FontSettings as CosmicFontSettings  } from "../styling.slint";

export component TableViewColumn inherits Rectangle {
    in property <SortOrder> sort-order: SortOrder.unsorted;
    callback clicked <=> touch-area.clicked;
    callback adjust_size(length);
    min-height: max(24px, layout.min-height);
    background: Palette.control-background;
    touch-area := TouchArea {
        width: parent.width - 11px;
    }

    layout := HorizontalLayout {
        padding-left: 8px;
        padding-right: 8px;
        spacing: 2px;
        HorizontalLayout {
            @children
        }

        icon := Image {
            image-fit: contain;
            colorize: Palette.foreground;
            visible: root.sort-order != SortOrder.unsorted;
            width: 12px;
            y: (parent.height - self.height) / 2;
            // source: root.sort-order == SortOrder.ascending ? Icons.arrow-down : Icons.arrow-up;
            animate colorize { duration: 150ms; }
        }
    }

    StateLayerBase {
        width: 100%;
        height: 100%;
        has-hover: touch-area.has-hover;
        pressed: touch-area.pressed;
    }

    // border
    Rectangle {
        y: parent.height - self.height;
        width: 100%;
        height: 1px;
        background: Palette.border;
    }

    Rectangle {
        x: parent.width - 1px;
        width: 1px;
        states [
            hover when movable-touch-area.has-hover: {
                background: Palette.foreground;
            }
        ]
        animate background { duration: 150ms; }
        movable-touch-area := TouchArea {
            width: 10px;
            mouse-cursor: ew-resize;
            moved => {
                if (self.pressed) {
                    adjust_size(self.mouse-x - self.pressed-x);
                }
            }
        }
    }
}

export component TableViewCell inherits Rectangle {
    clip: true;

    HorizontalLayout {
        padding: 8px;

        @children
    }
}

export component TableViewRow inherits Rectangle {
    in property <bool> selected;
    in property <bool> even;

    callback clicked <=> touch-area.clicked;
    callback pointer-event(/* event */ PointerEvent, /* absolute mouse position */ Point);

    min-width: layout.min-width;
    min-height: max(24px, layout.min-height);
    background: root.even ? Palette.control-background : transparent;

    layout := HorizontalLayout {
        @children
    }

    StateLayerBase {
        checked: root.selected;
        focus-boder-margin: 0;
        border-radius: root.border-radius;
        pressed: touch-area.pressed;
        has-hover: touch-area.has-hover;
    }

    touch-area := TouchArea {
        pointer-event(pe) => {
            root.pointer-event(pe, {
                x: self.absolute-position.x + self.mouse-x,
                y: self.absolute-position.y + self.mouse-y,
            });
        }
    }
}
