import { Palette } from "std-widgets.slint";
import { CosmicPalette } from "../styling/cosmic-styling.slint";
export component TextBox {
    callback accepted(string);
    in property <string> default-text;

    Rectangle {
        y: -6px;
        height: 35px;
        border-width: 2px;
        border-color: Palette.border;
        border-radius: 5px;
        background: Palette.alternate-background;
        TextInput {
            x: 5px;
            y: 3px;
            height: 30px;
            font-size: 22px;
            wrap: word-wrap;
            text: default-text;
            accepted => {
                accepted(self.text);
            }
        }
    }
}

export component LineEditBase inherits Rectangle {
    in-out property <string> placeholder-text;
    in-out property <length> font-size <=> i-text-input.font-size;
    in-out property <string> text <=> i-text-input.text;
    in-out property <brush> placeholder-color;
    in-out property <bool> enabled <=> i-text-input.enabled;
    in-out property <bool> has-focus: i-text-input.has-focus;
    in-out property <InputType> input-type <=> i-text-input.input-type;
    in-out property <TextHorizontalAlignment> horizontal-alignment <=> i-text-input.horizontal-alignment;
    in-out property <bool> read-only <=> i-text-input.read-only;
    in property <int> font-weight <=> i-text-input.font-weight;
    in property <brush> text-color;
    in property <color> selection-background-color <=> i-text-input.selection-background-color;
    in property <color> selection-foreground-color <=> i-text-input.selection-foreground-color;
    in property <length> margin;

    callback accepted(/* text */ string);
    callback edited(/* text */ string);

    public function set-selection-offsets(start: int, end: int) {
        i-text-input.set-selection-offsets(start, end);
    }

    public function select-all() {
        i-text-input.select-all();
    }

    public function clear-selection() {
        i-text-input.clear-selection();
    }

    public function cut() {
        i-text-input.cut();
    }

    public function copy() {
        i-text-input.copy();
    }

    public function paste() {
        i-text-input.paste();
        // i-text-input.edited();
    }

    min-height: i-text-input.preferred-height;
    min-width: max(50px, i-placeholder.min-width);
    clip: true;
    forward-focus: i-text-input;

    i-placeholder := Text {
        width: 100%;
        height: 100%;
        vertical-alignment: center;
        text: (root.text == "" && i-text-input.preedit-text == "") ? root.placeholder-text : "";
        font-size: i-text-input.font-size;
        font-italic: i-text-input.font-italic;
        font-weight: i-text-input.font-weight;
        font-family: i-text-input.font-family;
        color: root.placeholder-color;
        horizontal-alignment: root.horizontal-alignment;
        // the label is set on the LineEdit itself
        accessible-role: none;
    }

    i-text-input := TextInput {
        property <length> computed-x;

        x: min(0px, max(parent.width - self.width - self.text-cursor-width, self.computed-x));
        width: max(parent.width - self.text-cursor-width, self.preferred-width);
        height: 100%;
        vertical-alignment: center;
        single-line: true;
        color: root.text-color;

        cursor-position-changed(cpos) => {
            if (cpos.x + self.computed_x < root.margin) {
                self.computed_x = - cpos.x + root.margin;
            } else if (cpos.x + self.computed_x > parent.width - root.margin - self.text-cursor-width) {
                self.computed_x = parent.width - cpos.x - root.margin - self.text-cursor-width;
            }
        }

        accepted => {
            root.accepted(self.text);
        }

        // paste
        edited => {
            root.edited(self.text);
        }
    }
}

export component FilePathEdit {
    callback accepted(string);
    callback edited(/* text */ string);

    callback open-picker();
    in-out property <string> default-path;

    in-out property <bool> enabled: true;

    public function set-selection-offsets(start: int, end: int) {
        base.set-selection-offsets(start, end);
    }

    public function select-all() {
        base.select-all();
    }

    public function clear-selection() {
        base.clear-selection();
    }

    public function cut() {
        base.cut();
    }

    public function copy() {
        base.copy();
    }

    public function paste() {
        base.paste();
    }

    background := Rectangle {
        height: 35px;
        border-width: 1px;
        border-color: Palette.border;
        border-radius: 8px;
        background: Palette.control-background;
        layout := GridLayout {
            padding-left: 5px;

            base := LineEditBase {
                height: 32px;
                font-size: 22px;
                col: 0;
                colspan: 5;
                // placeholder-text: default-path;
                text: default-path;
                min-width: 200px;
                text-color: Palette.foreground;
                enabled: root.enabled;
                accepted => {
                    accepted(self.text);
                }
                // past
                edited(t) => {
                    root.edited(t);
                }
            }

            pick-btn := Rectangle {
                col: 5;
                border-top-left-radius: 0;
                border-bottom-left-radius: 0;
                border-top-right-radius: 8px;
                border-bottom-right-radius: 8px;
                height: 35px;
                border-width: 1px;
                border-color: Palette.border;
                width: 60px;
                background: ta.pressed ? CosmicPalette.state-pressed : Palette.alternate-background;
                ta := TouchArea {
                    enabled: root.enabled;
                    clicked => {
                        open-picker();
                    }
                }

                Image {
                    height: 20px;
                    width: 20px;
                    source: @image-url("../assets/folder-solid.svg");
                    colorize: Palette.foreground;
                }

                animate background, border-color { duration: 150ms; }
            }
        }
    }
}
