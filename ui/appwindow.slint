import { Button, VerticalBox,HorizontalBox, StandardTableView, TabWidget, TextEdit, CheckBox, ProgressIndicator } from "std-widgets.slint";
import { FileTable, Download } from "filetable.slint";
import { CosmicPalette } from "cosmic-styling.slint";


export struct SlintModConfig {
    enabled: bool,
    include: [string],
    name: string,
    descrition: string,
    version: string,
    author: string,
    date: string,
    dll: [string]
}

//export component downloads inherits Window {
//    min-width: 1280px;
//    min-height: 720px;
//    title: "Rust4Diva: Project Diva MM+ Mod Manager Mod Search";
//}



export component App inherits Window {
    min-width: 1280px;
    preferred-width: 1280px;
    min-height: 900px;
    preferred-height: 900px;
    title: "Rust4Diva: Project Diva MM+ Mod Manager";
    in property <int> counter: 4;
    in property <[int]> fs: [1, 2, 3];
    in property <[SlintModConfig]> mods: [];
    in property <[[StandardListViewItem]]> search-results: [];

    in property <[Download]> file-results: [];
    in property <[{key: int, value: Download}]> downloads-map;
    in-out property <[Download]> downloads-list: [];
    in property <[[StandardListViewItem]]> stuff: [];
    in property <string> dml-version: "";
    in-out property <string> selected-search: "";
    in-out property <string> selected-file: "";
    in property <bool> dml-enabled: false;
    in property <bool> s-prog-vis: false;
    property window_width <=> self.width;
    property window_height <=> self.height;
    callback load-mods <=> load-mods-btn.clicked;
    callback toggle-mod(int);
    callback toggle-dml();
    callback search-gb(string);
    callback list-files(int);
    callback download-file(Download, int);

    //    in-out property mods-table: mod-table;
    default-font-size: 16px;
    VerticalBox {
        Text {
            font-size: 24px;
            text: "Goodmorning Mother Fuckers!~~!~~~!";
        }

        HorizontalBox {
            Text {
                text: "Diva Mod Loader";
            }

            Text {
                text: "Version: " + dml-version;
            }

            CheckBox {
                text: dml-enabled ? "Enabled" : "Disabled";
                toggled => {
                    toggle-dml();
                }
            }
        }

        TabWidget {
            manager := Tab {
                title: "Mods";
                VerticalBox {
                    mod-table := StandardTableView {
                        min-width: window_width - 12px;
                        height: window_height - 260px;
                        columns: [
                            { title: "Enabled", width: 100px },
                            { title: "Name" },
                            { title: "Authors" },
                            { title: "Version", width: 100px },
                            { title: "Description" }
                        ];
                        rows: stuff;
                    }

                    HorizontalBox {
                        load-mods-btn := Button {
                            text: "Reload Mods";
                        }

                        toggle-mod-btn := Button {
                            text: "Toggle selected";
                            clicked => {
                                toggle-mod(mod-table.current-row)
                            }
                        }
                    }
                }
            }

            search-tab := Tab {
                title: "Search Online";
                VerticalBox {
                    HorizontalBox {
                        search := Text {
                            height: 36px;
                            y: 3px;
                            font-size: 22px;
                            text: "Search: ";
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        Rectangle {
                            y: -6px;
                            height: 35px;
                            border-width: 2px;
                            border-color: CosmicPalette.border;
                            border-radius: 5px;
                            background: CosmicPalette.alternate-background;
                            sbox := TextInput {
                                x: 5px;
                                y: 3px;
                                height: 30px;
                                font-size: 22px;
                                wrap: word-wrap;
                                text: "";
                                accepted => {
                                    search-gb(self.text)
                                }
                            }
                        }

                        search-prog := ProgressIndicator {
                            visible: s-prog-vis;
                            height: 32px;
                            width: 100px;
                            indeterminate: true;
                            progress: 0;
                        }
                    }

                    search-table := StandardTableView {
                        columns: [{ title: "Name" }, { title: "Authors" }, { title: "Category" }];
                        rows: search-results;
                        current-row-changed(row) => {
                            selected-search = search-results[row][0].text;
                        }
                    }

                    HorizontalBox {
                        Text {
                            text: "Selected Mod: " + selected-search;
                        }

                        Button {
                            text: "List files";
                            width: (window_width / 2) - 40px;
                            clicked => {
                                list-files(search-table.current-row);
                            }
                        }
                    }

                    files-table := FileTable {
                        columns: [{ title: "Name" }, { title: "Size" }, { title: "progress" }];
                        files: file-results;
                        current-row-changed(row) => {
                            // selected-file = row;
                            selected-file = file-results[row].name;
                        }
                    }

                    HorizontalBox {
                        Text {
                            text: "Selected File: " + selected-file;
                        }

                        Button {
                            text: "Download and Install";
                            width: (window_width / 2) - 40px;
                            clicked => {
                                download-file(file-results[files-table.current-row], downloads-list.length);
                                // downloads-list.push()
                            }
                        }
                    }
                }
            }

            downloads := Tab {
                title: "Downloads";
                VerticalBox {
                    for dl in downloads-map: Text {
                        text: dl.value.name;
                    }
                    FileTable {
                        columns: [{ title: "Name" }, { title: "Size" }, { title: "progress" }];
                        files: downloads-list;
                    }
                    
                }
            }
        }
    }
}
