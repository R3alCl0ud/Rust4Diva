import { Button, VerticalBox,HorizontalBox, StandardTableView, TabWidget, TextEdit, CheckBox, ProgressIndicator } from "std-widgets.slint";
import { FileTable, Download } from "widgets/filetable.slint";
import { Palette as CosmicPalette } from "styling.slint";
import { ErrorDialog } from "widgets/errordialog.slint";
import { ModTable } from "widgets/mod-table.slint";
import { DivaModElement } from "diva-types.slint";
import { ModPickTable } from "widgets/modpack-tables.slint";
import { ContextMenu } from "widgets/context-menu.slint";


export struct SlintModConfig {
    enabled: bool,
    include: [string],
    name: string,
    descrition: string,
    version: string,
    author: string,
    date: string,
    dll: [string]
}



export component App inherits Window {
    min-width: 1280px;
    preferred-width: 1280px;
    min-height: 900px;
    preferred-height: 900px;
    title: "Rust4Diva: Project Diva MM+ Mod Manager";
    in property <int> counter: 4;
    in property <[int]> fs: [1, 2, 3];

    in property <[[StandardListViewItem]]> search-results: [];

    in property <[Download]> file-results: [];
    in property <[{key: int, value: Download}]> downloads-map;
    in-out property <[Download]> downloads-list: [];
    in property <[[StandardListViewItem]]> stuff: [];

    in property <string> dml-version: "";
    in-out property <bool> dml-enabled: false;
    in-out property <string> selected-search: "";
    in-out property <string> selected-file: "";

    in-out property <int> temp-pos;
    in property <bool> s-prog-vis: false;

    in-out property <bool> show-error: true;
    in-out property <string> error-msg;

    property window_width <=> self.width;
    property window_height <=> self.height;

    in property <[DivaModElement]> mods: [];
    in-out property <[DivaModElement]> pack-mods;
    in-out property <[string]> modpacks;

    callback load-mods <=> load-mods-btn.clicked;
    callback toggle-mod(int);
    callback toggle-dml();
    callback search-gb(string);
    callback list-files(int);
    callback download-file(Download, int);
    callback open-file-picker;
    callback add-mod-to-pack(DivaModElement);
    callback remove-mod-from-pack(DivaModElement);
    // callback new-toggle-mod(int, DivaModElement);

    //    in-out property mods-table: mod-table;
    default-font-size: 16px;
    errordialog := ErrorDialog {
        x: (window_width / 2) - 100px;
        y: (window_height / 2) - 100px;

        msg: error-msg;
        ok-cb => {
            errordialog.close();
        }
    }

    VerticalLayout {
        HorizontalBox {
            Button {
                text: "(F)ile";
                clicked => {
                    open-file-picker();
                }
            }

            Button {
                text: "(H)elp";
            }

            Button {
                text: "Test Error";
                clicked => {
                    errordialog.show();
                }
            }
        }

        HorizontalBox {
            Text {
                text: "Diva Mod Loader";
            }

            Text {
                text: "Version: " + dml-version;
            }

            CheckBox {
                checked: dml-enabled;
                text: dml-enabled ? "Enabled" : "Disabled";
                toggled => {
                    dml-enabled = !dml-enabled;
                    toggle-dml();
                }
            }
        }

        TabWidget {
            manager := Tab {
                title: "Mods";
                VerticalBox {

                    test-table := ModTable {
                        min-width: window_width - 12px;
                        height: window_height - 210px;
                        columns: [
                            { title: "Enabled", width: 100px },
                            { title: "Name" },
                            { title: "Authors" },
                            { title: "Version", width: 100px },
                            { title: "Description" }
                        ];
                        mods: mods;
                        mod-toggled(index, module) => {
                            toggle-mod(index);
                        }
                    }

                    HorizontalBox {
                        load-mods-btn := Button {
                            text: "Reload Mods";
                            icon: @image-url("assets/repeat-solid.svg");
                        }
                    }
                }
            }

            packs-tab := Tab {
                title: "Modpacks";
                VerticalBox {
                    packsctx-menu := ContextMenu {
                        model: ["test", "fuck", "eden"];
                    }

                    Button {
                        text: packsctx-menu.model[packsctx-menu.current_item];
                        clicked => {
                            if (packsctx-menu.model.length == 0) {
                                return;
                            }
                            packsctx-menu.show_and_focus();
                        }
                    }

                    HorizontalBox {
                        VerticalBox {
                            Text {
                                text: "Installed";
                            }

                            mod-picker := ModPickTable {
                                width: (window_width / 2) - 100px;
                                height: window_height - 260px;
                                columns: [{ title :"Name" }];
                                mods: mods;
                            }
                        }

                        VerticalBox {
                            Button {
                                icon: @image-url("assets/right-long-solid.svg");
                                clicked => {
                                    if mod-picker.current-row != -1 {
                                        add-mod-to-pack(mods[mod-picker.current-row]);
                                    }
                                }
                            }

                            Button {
                                icon: @image-url("assets/left-long-solid.svg");
                                clicked => {
                                    if in-pack.current-row != -1 {
                                        remove-mod-from-pack(pack-mods[in-pack.current-row]);
                                    }
                                }
                            }
                        }

                        VerticalBox {
                            Text {
                                text: "In Modpack";
                            }

                            in-pack := ModPickTable {
                                width: (window_width / 2) - 100px;
                                height: window_height - 260px;
                                columns: [{ title :"Name" }];
                                mods: pack-mods;
                            }
                        }
                    }
                }
            }

            search-tab := Tab {
                title: "Search Online";
                VerticalBox {
                    HorizontalBox {
                        search := Text {
                            height: 36px;
                            y: 3px;
                            font-size: 22px;
                            text: "Search: ";
                            vertical-alignment: TextVerticalAlignment.center;
                        }

                        Rectangle {
                            y: -6px;
                            height: 35px;
                            border-width: 2px;
                            border-color: CosmicPalette.border;
                            border-radius: 5px;
                            background: CosmicPalette.alternate-background;
                            sbox := TextInput {
                                x: 5px;
                                y: 3px;
                                height: 30px;
                                font-size: 22px;
                                wrap: word-wrap;
                                text: "";
                                accepted => {
                                    search-gb(self.text)
                                }
                            }
                        }

                        search-prog := ProgressIndicator {
                            visible: s-prog-vis;
                            height: 32px;
                            width: 100px;
                            indeterminate: true;
                            progress: 0;
                        }
                    }

                    search-table := StandardTableView {
                        columns: [{ title: "Name" }, { title: "Authors" }, { title: "Category" }];
                        rows: search-results;
                        current-row-changed(row) => {
                            selected-search = search-results[row][0].text;
                        }
                    }

                    HorizontalBox {
                        Text {
                            text: "Selected Mod: " + selected-search;
                        }

                        Button {
                            text: "List files";
                            width: (window_width / 2) - 40px;
                            clicked => {
                                list-files(search-table.current-row);
                            }
                        }
                    }

                    files-table := FileTable {
                        columns: [{ title: "Name" }, { title: "Size" }];
                        files: file-results;
                        current-row-changed(row) => {
                            // selected-file = row;
                            selected-file = file-results[row].name;
                        }
                    }

                    HorizontalBox {
                        Text {
                            text: "Selected File: " + selected-file;
                        }

                        Button {
                            text: "Download and Install";
                            width: (window_width / 2) - 40px;
                            clicked => {
                                if file-results.length != 0 && files-table.current-row != -1 {
                                    download-file(file-results[files-table.current-row], downloads-list.length);
                                }
                            }
                        }
                    }
                }
            }

            downloads := Tab {
                title: "Downloads";
                VerticalBox {
                    for dl in downloads-map: Text {
                        text: dl.value.name;
                    }
                    FileTable {
                        columns: [{ title: "Name" }, { title: "Size" }, { title: "Progress" }];
                        files: downloads-list;
                    }
                }
            }
        }
    }
}
