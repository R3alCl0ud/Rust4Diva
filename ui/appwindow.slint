import { Palette, Button, VerticalBox, HorizontalBox, StandardTableView, TabWidget, TextEdit, CheckBox, ProgressIndicator, GridBox, Switch } from "std-widgets.slint";

import { Palette as CosmicPalette } from "styling.slint";
import { DivaModElement, ModPackElement } from "diva-types.slint";

import { FileTable, Download } from "widgets/filetable.slint";
import { ModTable } from "widgets/mod-table.slint";
import { ModPickTable, PackTable } from "widgets/modpack-tables.slint";
import { TextEntryDialog } from "widgets/text-entry-dialog.slint";
import { InfoDialog } from "widgets/info-dialog.slint";
import { TextBox } from "widgets/text-box.slint";
import { DeletePackDialog } from "widgets/delete-pack-dialog.slint";
import { ModCtxMenu } from "widgets/modctxmenu.slint";
import { GbPreviewData, GbPreviewCard} from "widgets/gb-search-card.slint";


import { SettingsWindow, SettingsLogic } from "subwindows/settings.slint";
import { EditModDialog } from "subwindows/editmod.slint";
import { FirstSetup, SetupLogic } from "subwindows/setup.slint";

import { ModManager } from "tabs/modmanager.slint";
import { ModPacksTab } from "tabs/modpacks.slint";
import { GameBanana } from "tabs/gamebanana.slint";

import { ErrorDialog } from "dialogs/errordialog.slint";
import { ConfirmDeletePack } from "dialogs/deletepack.slint";
import { ErrorMessageWindow } from "dialogs/errormsg.slint";
import { ConfirmDelete } from "dialogs/confirmdelete.slint";

import { ModpackLogic, ModLogic, WindowLogic, DivaLogic, GameBananaLogic } from "applogic.slint";

export { GbPreviewData, GameBananaLogic }
export { ModPackElement, EditModDialog, ModpackLogic, ModLogic, SettingsWindow, ConfirmDeletePack }
export { WindowLogic, SettingsLogic, ErrorMessageWindow, FirstSetup, SetupLogic, ConfirmDelete, DivaLogic, Palette }

export struct SlintModConfig {
    enabled: bool,
    include: [string],
    name: string,
    descrition: string,
    version: string,
    author: string,
    date: string,
    dll: [string]
}



@rust-attr(derive(serde::Serialize, serde::Deserialize))
export struct TestJSON {
    test: int}


export component App inherits Window {
    preferred-width: 1280px;
    preferred-height: 800px;
    title: "Rust4Diva: Project Diva MM+ Mod Manager";
    in property <int> counter: 4;
    in property <[int]> fs: [1, 2, 3];

    in property <[[StandardListViewItem]]> search-results: [];
    in property <[Download]> file-results: [];
    in property <[{key: int, value: Download}]> downloads-map;
    in-out property <[Download]> downloads-list: [];
    in property <[[StandardListViewItem]]> stuff: [];
    in property <string> dml-version: "";
    in property <string> r4d-version: "";
    in-out property <bool> dml-enabled: false;
    in-out property <string> selected-search: "";
    in-out property <string> selected-file: "";
    in-out property <int> temp-pos;

    in property <[GbPreviewData]> s-results:[];
    in property <bool> s-prog-vis: false;
    in property <int> n-results: 0;
    in-out property <int> s-page: 0;

    in-out property <bool> pack-modified: false;
    out property <ColorScheme> color-scheme: Palette.color-scheme;

    property window_width <=> self.width;
    property window_height <=> self.height;

    in property <[DivaModElement]> mods: [];
    in-out property <[DivaModElement]> pack-mods: [];
    in-out property <[string]> modpacks: [];
    in-out property <string> active-pack;
    out property <string> current-pack: mpmgmt-tab.current-pack;

    callback load-mods <=> mgmt-tab.clicked;
    callback toggle-mod(int);
    callback search-gb(string);
    callback list-files(int);
    callback download-file(Download, int);
    callback open-file-picker;
    callback add-mod-to-pack(DivaModElement, string);
    callback remove-mod-from-pack(DivaModElement, string);
    callback modpack-changed(string);
    callback save-modpack(string, [DivaModElement]);
    callback apply-modpack([DivaModElement]);
    callback close-windows();

    public function set-color-scheme(scheme: ColorScheme) {
        Palette.color-scheme = scheme;
    }

    public function ask-install-dml() {
    }

    // ConfirmDelete {}

    // EditModDialog {}
    default-font-size: 16px;

    packcreator := TextEntryDialog {
        offset_x: -100px;
        accepted(text) => {
            ModpackLogic.create-new-pack(text);
        }
    }

    aboutdialog := InfoDialog {
        r4dversion: r4d-version;
    }

    confirmdeletepack := DeletePackDialog { }

    mod-ctx-menu := ModCtxMenu {
        win-height: window_height;
        win-width: window_width;
    }

    VerticalLayout {
        GridBox {
            Row {
                Button {
                    horizontal-stretch: 0;
                    text: "Install Mod Archive";
                    clicked => {
                        open-file-picker();
                    }
                }

                Button {
                    horizontal-stretch: 0;
                    text: "About Rust4Diva";
                    clicked => {
                        aboutdialog.show();
                    }
                }

                HorizontalBox {
                    Text {
                        text: "Diva Mod Loader: " + dml-version;
                        // text: "H: " + window_height / 1px + " W: " + window_width / 1px;
                        vertical-alignment: center;
                    }

                    Switch {
                        checked: dml-enabled;
                        toggled => {
                            dml-enabled = !dml-enabled;
                            DivaLogic.toggle-dml();
                        }
                    }

                    Button {
                        text: "Update DML";
                        clicked => {
                            DivaLogic.download-dml();
                        }
                    }
                }

                Button {
                    horizontal-stretch: 0;
                    text: "Open Settings";
                    clicked => {
                        WindowLogic.open-settings();
                    }
                }
            }
        }

        TabWidget {
            manager := Tab {
                title: "Mods";
                mgmt-tab := ModManager {
                    active-pack: active-pack;
                    width: 100%;
                    height: (window_height - parent.absolute-position.y) - 5px;
                    mods: mods;
                    open-module-ctx(m, i, p) => {
                        mod-ctx-menu.show(m, i, p);
                    }
                }
            }

            packs-tab := Tab {
                title: "Modpacks";
                mpmgmt-tab := ModPacksTab {
                    width: 100%;
                    height: (window_height - parent.absolute-position.y) - 5px;
                    mods: mods;
                    modpacks: modpacks;
                    pack-mods: pack-mods;
                    show-text-entry => {
                        packcreator.show();
                    }
                }
            }

            search-tab := Tab {
                title: "Search Online";
                GameBanana {
                    height: 100%;
                    width: 100%;
                    results: s-results;
                    loading: s-prog-vis;
                    n-results: n-results;
                }
            }

            downloads := Tab {
                title: "Downloads";
                VerticalBox {
                    for dl in downloads-map: Text {
                        text: dl.value.name;
                    }
                    FileTable {
                        columns: [{ title: "Name" }, { title: "Size" }, { title: "Progress" }];
                        files: downloads-list;
                    }
                }
            }
        }
    }
}
